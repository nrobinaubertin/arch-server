#!/bin/sh

# Script used to backup stuff using ssh and rsync

# TODO
# write usage
# add error message on flock
# erase trailing "/" in args
# verify that /tmp/ is usable before using it (fallback to $HOME ?)

# usage function (manual)
function usage {
    echo ""
    echo "TODO : write usage function"
    echo ""
}

# function used to collect arguments
function args {

    if [[ "$port" == "" ]]
    then
        port="22"
    fi
    if [[ "$speed" == "" ]]
    then
        speed="0"
    fi

    if (( $# == 0 ))
    then
        usage
        exit 0
    fi

    # get the port if specified
    if [[ "$1" == "-p" ]] && [[ -n $2 ]]
    then
        port="$2"
        args "${@:3}"
        exit 0
    fi

    # get the speed if specified
    if [[ "$1" == "-s" ]] && [[ -n $2 ]]
    then
        speed="$2"
        args "${@:3}"
        exit 0
    fi

    if [[ -n $1 ]]
    then
        source_dir="$1"
    else
        usage
        exit 0
    fi

    if [[ -n $2 ]] && [[ $(echo "$2" | grep -E "[^@:]+@[^@:]+:.*") != "" ]]
    then
        target_dir=$(echo "$2" | cut -d: -f2)
        user=$(echo "$2" | cut -d@ -f1)
        domain=$(echo "$2" | cut -d: -f1 | cut -d@ -f2)
    else
        usage
        exit 0
    fi

    if [[ "$target_dir" == "" ]] || [[ "$user" == "" ]] || [[ "$domain" == "" ]]
    then
        echo "Could not determine target"
        exit 0
    fi

    echo -e ""
    echo -e "source_dir:\t$source_dir"
    echo -e "target_dir:\t$target_dir"
    echo -e "user:\t\t$user"
    echo -e "domain:\t\t$domain"
    echo -e "port:\t\t$port"
    echo -e "speed:\t\t$speed"
    echo -e ""
    sleep 2 # give the user the possibility to stop if there is an error

    verify_lock
}

# the real backup function
function backup {
    p=$(ping -W 1 -c 3 -l 3 "${domain}" 2>/dev/null | tail -n1 | awk '{print $4}' | tr '/' ' ' | cut -d' ' -f1)
    if [[ -z "${p}" ]]
    then
        echo "Distant server does not respond to ping. Aborting."
        exit 0
    fi
    echo -n "."

    if [[ -z $(which ssh) ]]
    then
        echo "ssh is not in your path. Aborting."
        exit 0
    fi
    echo -n "."

    ssh -o "BatchMode=yes" -q -p "${port}" "${user}"@"${domain}" exit
    if [[ $? != 0 ]]
    then
        echo "Could not connect to distant server using ssh. Aborting."
        exit 0
    fi
    echo "."

    # Here is a trick to make rsync work with renamed/moved files
    # The trick was first showed here : https://lincolnloop.com/blog/detecting-file-moves-renames-rsync/
    # It was then enhanced (with only rsync) here : https://github.com/dparoli/hrsync/blob/master/hrsync

    # The idea is to notice that, when fed with --no-in-recursive, rsync starts by copying all hard links.
    # Using that, we make a shadow (a memory) of the tree of files in a directory using hardlinks.
    # When rsync transfers the hardlinks, the same tree is used and rsync only verify that everything is there.
    # That finished, he starts to transfer the rest. But the rest is hardlinking to the same files, so he transfers them only as hardlinks.
    # (they are all hardlinks but he believes that the shadow/memory are the initials hardlinks)

    # create the shadow if there none
    # --link-dest is used to only transfer hardlinks (making the work of cp -rlp)
    if [ ! -d "${source_dir}/${shadow}" ] 
    then
        rsync -a --delete --link-dest="${source_dir}" --exclude="/${shadow}" "${source_dir}" "${source_dir}/${shadow}"
    fi

    # do the real synchronization, that is, to the remote location (with the shadow/memory)
    rsync -axhHP -e "ssh -p ${port}" --bwlimit="${speed}" --stats --no-inc-recursive --numeric-ids --delete-after "${source_dir}" /tmp/shadow.backup "${user}"@"${domain}":"${target_dir}"

    # get the status of the last rsync
    status=$?

	# update memory only if the status is 0
	# If it's not 0, then rsync was stopped before finishing and the last synchro shadow/memory should remain the same.
    if [ $status -eq 0 ]
    then

        # update source shadow directory
		# this way, next time we sync, we'll only sync differences with the actual tree
        rsync -a --delete --link-dest="${source_dir}" --exclude="/${shadow}" "${source_dir}" "${source_dir}/${shadow}"

        # update remote shadow directory : the command goes through ssh
		ssh "${user}"@"${domain}" "rsync -a --delete --link-dest=${target_dir} --exclude=/${shadow} ${target}/ ${target}/${shadow}" 
    fi
}

# prevent from running if rsync already is
# this function is used if flock is absent from the system
function plock {
    if [[ -z $(which rsync) ]]
    then
        echo "rsync is not in your path. Aborting."
        exit 0
    fi
    echo -n "."


    if [[ $(pgrep rsync 2>/dev/null) != "" ]]
    then
        echo "Rsync is already running. Aborting."
        exit 0
    fi
}

# verify if the lock is set before starting
function verify_lock {
    if [[ -z $(which flock) ]]
    then
        plock
        backup
    else
        (
            flock -n 9 || exit 1
            backup
        ) 9>/tmp/lock.backup
    fi
}

args "${@:1}"
