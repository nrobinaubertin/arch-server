#!/bin/sh

# TODO
# use colors effectively
# remove fortune ?

# Text Reset
RCol='\033[0m'    

# Regular                              
Bla='\033[0;30m';                      
Red='\033[0;31m';                      
Gre='\033[0;32m';                      
Yel='\033[0;33m';                      
Blu='\033[0;34m';                      
Pur='\033[0;35m';                      
Cya='\033[0;36m';                      
Whi='\033[0;37m';                      

#Bold              
BBla='\033[1;30m';
BRed='\033[1;31m';
BGre='\033[1;32m';
BYel='\033[1;33m';
BBlu='\033[1;34m';
BPur='\033[1;35m';
BCya='\033[1;36m';
BWhi='\033[1;37m';

#Underline         
UBla='\033[4;30m';
URed='\033[4;31m';
UGre='\033[4;32m';
UYel='\033[4;33m';
UBlu='\033[4;34m';
UPur='\033[4;35m';
UCya='\033[4;36m';
UWhi='\033[4;37m';

#High Intensity    
IBla='\033[0;90m';
IRed='\033[0;91m';
IGre='\033[0;92m';
IYel='\033[0;93m';
IBlu='\033[0;94m';
IPur='\033[0;95m';
ICya='\033[0;96m';
IWhi='\033[0;97m';

#BoldHigh Intens    
BIBla='\033[1;90m';
BIRed='\033[1;91m';
BIGre='\033[1;92m';
BIYel='\033[1;93m';
BIBlu='\033[1;94m';
BIPur='\033[1;95m';
BICya='\033[1;96m';
BIWhi='\033[1;97m';

#Background        
On_Bla='\033[40m';
On_Red='\033[41m';
On_Gre='\033[42m';
On_Yel='\033[43m';
On_Blu='\033[44m';
On_Pur='\033[45m';
On_Cya='\033[46m';
On_Whi='\033[47m';

#High Intensity Backgrounds
On_IBla='\033[0;100m';
On_IRed='\033[0;101m';
On_IGre='\033[0;102m';
On_IYel='\033[0;103m';
On_IBlu='\033[0;104m';
On_IPur='\033[0;105m';
On_ICya='\033[0;106m';
On_IWhi='\033[0;107m';

function printAsciiArt {
echo -e "
${Cya}                ._,.                           ${RCol}
${Cya}          '..-..pf.                            ${RCol}
${Cya}         -L   ..#'                             ${RCol}
${Cya}       .+_L  .']#                              ${RCol}
${Cya}       ,'j' .+.j'                 -'.__..,.,p. ${RCol}
${Cya}      _~ #..<..0.                 .J-.''..._f. ${RCol}
${Cya}     .7..#_.. _f.                .....-..,'4'  ${RCol}
${Cya}     ;' ,#j.  T'      ..         ..J....,'.j'  ${RCol}
${Cya}    .' ..'^.,-0.,,,,yMMMMM,.    ,-.J...+'.j@   ${RCol}
${Cya}   .'.'...' .yMMMMM0M@^='''g.. .'..J..'.'.jH   ${RCol}
${Cya}   j' .'1'  q'^)@@#'^'.''='BNg_...,]_)'...0-   ${RCol}
${Cya}  .T ...I. j'    .'..+,_.'3#MMM0MggCBf....F.   ${RCol}
${Cya}  j/.+'.{..+       '^~'-^~~''''''''?'''''1'    ${RCol}
${Cya}  .... .y.}                  '.._-:'_...jf     ${RCol}
${Cya}  g-.  .Lg'                 ..,..'-....,'.     ${RCol}
${Cya} .'.   .Y^                  .....',].._f       ${RCol}
${Cya} ......-f.                 .-,,.,.-:--&'       ${RCol}
${Cya}                           .'...'..'_J'        ${RCol}
${Cya}                           .~......'#'         ${RCol}
${Cya}                           '..,,.,_]'          ${RCol}
${Cya}                           .L..'..''.          ${RCol}
"
}

# get uptime
function getUptime {
    ups=$(cat /proc/uptime | cut -d. -f1)
    upm=$(( $ups / 60 ))
    uph=$(( $upm / 60 ))
    upd=$(( $uph / 24 ))
    if [ "$upm" != 0 ]; then ups=$(( $ups - $upm*60 )); fi
    if [ "$uph" != 0 ]; then upm=$(( $upm - $uph*60 )); fi
    if [ "$upd" != 0 ]; then uph=$(( $uph - $upd*24 )); fi
    if [ "$ups" -lt 10 ]; then ups=$( echo "0$ups"); fi
    if [ "$upm" -lt 10 ]; then upm=$( echo "0$upm"); fi
    if [ "$uph" -lt 10 ]; then uph=$( echo "0$uph"); fi

    if [ "$upd" != 0 ]
    then
        if [ "$upd" <= 9 ]
        then
            echo "${Rcol}$upd day, $uph:$upm:$ups"
        else
            echo "${Rcol}$upd days, $uph:$upm:$ups"
        fi
    else
        echo -e "${Rcol}$uph:$upm:$ups"
    fi
}

function printStorage {
    echo -e "${BGre}Filesystem\tSize\tAvailable${RCol}"
    for index in {1..10}
    do
        mydev_data=$(df -h | sort | grep -E "^/dev/" | sed -n "${index}p" | sed -r 's/\s+/ /g')
        mydev_name=$(echo -n "$mydev_data" | cut -d' ' -f1)
        mydev_size=$(echo -n "$mydev_data" | cut -d' ' -f2)
        mydev_avail=$(echo -n "$mydev_data" | cut -d' ' -f4)
        if [[ -n $mydev_name ]] && [[ -n $mydev_size ]] && [[ -n $mydev_avail ]]
        then
            printf "%s\t%s\t%s\n" "${mydev_name}" "${mydev_size}" "${mydev_avail}"
        fi
    done
}

function printHeader {
    echo "----------"
    echo `date`
    if [[ -n $(which fortune) ]]
    then
        fortune -sn 70
    fi
    echo "----------"
}

function printInfos {

    # details
    machine=$(</proc/sys/kernel/hostname)
    #arch=$(uname -m)
    #mykernel=$(uname -r)
    read arch mykernel <<<$(uname -mr)
    mycpu=$(grep -m1 "model name" /proc/cpuinfo | awk -F": " '{print $2}')
    #myshell=$(ps -p `ps -p $$ -o ppid=` | sed -n '2p' | sed -r 's/.*\s(.*)$/\1/')
    myshell=$(echo $SHELL)
    #mymem=$(free -h --si | sed -n '2p' | sed -r 's/\s+/ /g' | cut -d' ' -f2)
    mymem=$(free -h --si | head -n2 | tail -n1 | awk '{print $2}')
    myip=$(ip route show | tail -n1 | sed -r 's/.*src(.*)/\1/' | cut -d' ' -f2)
    #mypackages=$(pacman -Q | wc -l)
    myterm=$(echo $TERM)
    mycols=$(tput cols)
    mylines=$(tput lines)

    echo -e "${BGre}Machine:${RCol} ${machine}"
    echo -e "${BGre}Architecture:${RCol} ${arch}"
    echo -e "${BGre}Kernel:${RCol} ${mykernel}"
    echo -e "${BGre}CPU:${RCol} ${mycpu}"
    echo -e "${BGre}Memory:${RCol} ${mymem}"
    echo -e "${BGre}Uptime:${RCol} $(getUptime)"
    echo -e "${BGre}Shell:${RCol} ${myshell}"
    echo -e "${BGre}Terminal:${RCol} ${myterm}"
    if [[ -n ${myip} ]]
    then
        echo -e "${BGre}IP:${RCol} ${myip}"
    fi
    echo -e "${BGre}Geometry:${RCol} ${mycols}x${mylines}"
    #echo -e "${BGre}Packages:${RCol} ${mypackages}"
}

function printFull {

    j=1
    ascii_art=$(printAsciiArt)
    infos=$(printInfos)
    storage=$(printStorage)
    
    printHeader

    for i in {1..22}
    do
        p1=$(printf "%s\n\n" "$ascii_art" | head -n${i} | tail -n1)
        p2=$(printf "\n\n\n\n\n%s\n\n%s\n\n" "$infos" "$storage" | head -n${i} | tail -n1)

        if [[ -n "$p1" ]] || [[ -n "$p2" ]]
        then
            printf "%s %s\n\r" "$p1" "$p2"
        fi

    done
}

function printSmall {
    printHeader
    echo ""
    printInfos
    echo ""
    printStorage
}

function printGreeting {
    if [[ $(tput cols) -gt 85 ]] && [[ $(tput lines) -gt 25 ]]
    then
        printFull
        exit 0
    fi
    if [[ $(tput cols) -gt 35 ]] && [[ $(tput lines) -gt 25 ]]
    then
        printSmall
        exit 0
    fi
    if [[ $(tput cols) -gt 30 ]] && [[ $(tput lines) -gt 20 ]]
    then
        printInfos
        exit 0
    fi
}

printGreeting
